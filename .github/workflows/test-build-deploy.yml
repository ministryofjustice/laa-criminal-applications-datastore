name: CI and CD

on:
  pull_request:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest

    env:
      RACK_ENV: test
      RAILS_ENV: test
      DYNAMO_ENDPOINT: "http://127.0.0.1:8000"
      # Following AWS keys need to be present, but are just dummies!
      AWS_REGION: 'eu-west-2'
      AWS_ACCESS_KEY_ID: 'DUMMYIDEXAMPLE'
      AWS_SECRET_ACCESS_KEY: 'DUMMYEXAMPLEKEY'

    steps:
      - name: Setup DynamoDB Local
        uses: rrainn/dynamodb-action@a839324dce7bae1fafac6a62922e37675c6caf23
        with:
          dbPath: # undefined by default, if this is undefined inMemory will be used
          sharedDb: # undefined by default
          delayTransientStatuses: # undefined by default
          optimizeDbBeforeStartup: # undefined by default
          port: 8000
          cors: '*'

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Ruby and install gems
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true

      - name: Setup tables
        run: bundle exec rake dynamoid:create_tables

      - name: Run linters and tests
        run: bundle exec rake

      - name: Upload rspec coverage (if failure)
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: rspec-coverage
          path: coverage/*

  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Store current date
        run: echo "BUILD_DATE=$(date +%Y%m%d%H%M)" >> $GITHUB_ENV

      - name: Build
        run: |
          docker build \
            --label build.git.sha=${{ github.sha }} \
            --label build.git.branch=${{ github.ref }} \
            --label build.date=${{ env.BUILD_DATE }} \
            --build-arg APP_BUILD_DATE=${{ env.BUILD_DATE }} \
            --build-arg APP_BUILD_TAG=${{ github.ref }} \
            --build-arg APP_GIT_COMMIT=${{ github.sha }} \
            -t app .

      - name: Push to ECR
        id: ecr
        uses: jwalton/gh-ecr-push@b10a019116283fff10914554dfe85bfb1c21d41b
        with:
          access-key-id: ${{ secrets.ECR_AWS_ACCESS_KEY_ID }}
          secret-access-key: ${{ secrets.ECR_AWS_SECRET_ACCESS_KEY }}
          region: eu-west-2
          local-image: app
          image: ${{ secrets.ECR_NAME }}:${{ github.sha }}, ${{ secrets.ECR_NAME }}:staging.latest

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    environment: staging

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Unlock git-crypt secrets
        uses: sliteteam/github-action-git-crypt-unlock@8b1fa3ccc81e322c5c45fbab261eee46513fd3f8
        env:
          GIT_CRYPT_KEY: ${{ secrets.GIT_CRYPT_KEY }}

      - name: Authenticate to the cluster
        env:
          KUBE_CERT: ${{ secrets.KUBE_STAGING_CERT }}
          KUBE_TOKEN: ${{ secrets.KUBE_STAGING_TOKEN }}
          KUBE_CLUSTER: ${{ secrets.KUBE_STAGING_CLUSTER }}
          KUBE_NAMESPACE: ${{ secrets.KUBE_STAGING_NAMESPACE }}
        run: |
          echo "${KUBE_CERT}" > ca.crt
          kubectl config set-cluster ${KUBE_CLUSTER} --certificate-authority=./ca.crt --server=https://${KUBE_CLUSTER}
          kubectl config set-credentials deploy-user --token=${KUBE_TOKEN}
          kubectl config set-context ${KUBE_CLUSTER} --cluster=${KUBE_CLUSTER} --user=deploy-user --namespace=${KUBE_NAMESPACE}
          kubectl config use-context ${KUBE_CLUSTER}

      - name: Update deployment image
        env:
          ECR_URL: ${{ secrets.ECR_URL }}
          IMAGE_TAG: ${{ github.sha }}
        run: envsubst < config/kubernetes/staging/deployment.tpl > config/kubernetes/staging/deployment.yml

      - name: Apply manifest files
        run: kubectl apply -f config/kubernetes/staging
